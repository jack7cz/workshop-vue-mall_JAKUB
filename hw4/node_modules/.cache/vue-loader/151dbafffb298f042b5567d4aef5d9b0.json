{"remainingRequest":"C:\\Users\\nedor\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\nedor\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\nedor\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Kuba\\Documents\\GitHub\\workshop-vue-mall_JAKUB\\hw4\\index.vue?vue&type=template&id=6de5ab34&","dependencies":[{"path":"D:\\Kuba\\Documents\\GitHub\\workshop-vue-mall_JAKUB\\hw4\\index.vue","mtime":1586017692491},{"path":"C:\\Users\\nedor\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nedor\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\nedor\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nedor\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCBbCiAgICBfYygicCIsIFsKICAgICAgX2MoImIiLCBbX3ZtLl92KCJWeWZpbHRydWogamVuIHByYcW+c2vDqSBhZHJlc3k6IildKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJsYWJlbCIsIFsKICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmluUHJhZ3VlLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICJpblByYWd1ZSIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJjaGVja2JveCIgfSwKICAgICAgICAgIGRvbVByb3BzOiB7CiAgICAgICAgICAgIGNoZWNrZWQ6IEFycmF5LmlzQXJyYXkoX3ZtLmluUHJhZ3VlKQogICAgICAgICAgICAgID8gX3ZtLl9pKF92bS5pblByYWd1ZSwgbnVsbCkgPiAtMQogICAgICAgICAgICAgIDogX3ZtLmluUHJhZ3VlCiAgICAgICAgICB9LAogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICB2YXIgJCRhID0gX3ZtLmluUHJhZ3VlLAogICAgICAgICAgICAgICAgJCRlbCA9ICRldmVudC50YXJnZXQsCiAgICAgICAgICAgICAgICAkJGMgPSAkJGVsLmNoZWNrZWQgPyB0cnVlIDogZmFsc2UKICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSgkJGEpKSB7CiAgICAgICAgICAgICAgICB2YXIgJCR2ID0gbnVsbCwKICAgICAgICAgICAgICAgICAgJCRpID0gX3ZtLl9pKCQkYSwgJCR2KQogICAgICAgICAgICAgICAgaWYgKCQkZWwuY2hlY2tlZCkgewogICAgICAgICAgICAgICAgICAkJGkgPCAwICYmIChfdm0uaW5QcmFndWUgPSAkJGEuY29uY2F0KFskJHZdKSkKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICQkaSA+IC0xICYmCiAgICAgICAgICAgICAgICAgICAgKF92bS5pblByYWd1ZSA9ICQkYQogICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDAsICQkaSkKICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoJCRhLnNsaWNlKCQkaSArIDEpKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX3ZtLmluUHJhZ3VlID0gJCRjCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCJQcmFoYSIpCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJwIiwgWwogICAgICBfYygiYiIsIFtfdm0uX3YoIlNlem5hbSBhZHJlczoiKV0pLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoCiAgICAgICAgInVsIiwKICAgICAgICBfdm0uX2woX3ZtLmFkZHJlc3NlcywgZnVuY3Rpb24oYWRkcmVzcywgaW5kZXgpIHsKICAgICAgICAgIHJldHVybiBfYygic3BhbiIsIHsga2V5OiBpbmRleCB9LCBbCiAgICAgICAgICAgIChfdm0uaW5QcmFndWUgPT0gdHJ1ZSAmJiBhZGRyZXNzLmNpdHkgPT0gIlByYWhhIikgfHwKICAgICAgICAgICAgX3ZtLmluUHJhZ3VlID09IGZhbHNlCiAgICAgICAgICAgICAgPyBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICBfdm0uX3MoCiAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLnN0cmVldCArICIsICIgKyBhZGRyZXNzLmNpdHkgKyAiICIgKyBhZGRyZXNzLnppcAogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICBdKQogICAgICAgIH0pLAogICAgICAgIDAKICAgICAgKQogICAgXSksCiAgICBfYygiZGl2IiwgWwogICAgICBfYygiYiIsIFtfdm0uX3YoIkNoeWLDrSB0aSBuxJtqYWvDoSBhZHJlc2E/IFpkZSBzaSBqaSBtxa/FvmXFoSBwxZlpZGF0OiIpXSksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygiZm9ybSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJsYWJlbCIsIFsKICAgICAgICAgICAgX3ZtLl92KCIgVWxpY2UgYSDEjcOtc2xvIHBvcGlzbsOpOiIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm5ld0FkZHJlc3Muc3RyZWV0LAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibmV3QWRkcmVzcy5zdHJlZXQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIgfSwKICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm5ld0FkZHJlc3Muc3RyZWV0IH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLm5ld0FkZHJlc3MsICJzdHJlZXQiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygibGFiZWwiLCBbCiAgICAgICAgICAgIF92bS5fdigiIE3Em3N0bzoiKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5uZXdBZGRyZXNzLmNpdHksCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJuZXdBZGRyZXNzLmNpdHkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIgfSwKICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm5ld0FkZHJlc3MuY2l0eSB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5uZXdBZGRyZXNzLCAiY2l0eSIsICRldmVudC50YXJnZXQudmFsdWUpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJsYWJlbCIsIFsKICAgICAgICAgICAgX3ZtLl92KCIgUFPEjDoiKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5uZXdBZGRyZXNzLnppcCwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm5ld0FkZHJlc3MuemlwIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5uZXdBZGRyZXNzLnppcCB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5uZXdBZGRyZXNzLCAiemlwIiwgJGV2ZW50LnRhcmdldC52YWx1ZSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCkKICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5hZGRBZGRyZXNzKCRldmVudCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlDFmWlkYXQgYWRyZXN1IildCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}